---

- name: Add postgres repository key
  apt_key: url=http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc state=present 

- name: Add postgres repository
  #apt_repository: repo='deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main' state=present
  apt_repository: repo='deb http://apt.postgresql.org/pub/repos/apt/ {{ansible_distribution_release}}-pgdg main' state=present
  

- name: Install Packages
  apt: >
    pkg={{item}}
    state=installed
    update-cache=yes
    
  with_items:
    - python-software-properties
    - cowsay
    - python-setuptools
    - libpq-dev
    - python-psycopg2
    - postgresql-{{ postgresql_version }}-postgis-{{ postgis_version }} 
    - git
    - postgresql-9.3-pgtap

- name: Ensure the PostgreSQL service is running
  service: name=ssh state=started

- name: Ensure database is created
  become_user: postgres
  become: yes
  postgresql_db: name={{ pg_db_name }}
                 encoding='UTF-8'
                 state=present


- name: install pg extensions
  become_user: postgres
  become: yes
  postgresql_ext: name={{ item }}
                  db={{ pg_db_name }}
                  state=present
  with_items:
    - postgis
    - pgtap
 
                
#- name: Ensure schema is created # Released ansible 2.3
#  become_user: postgres
#  become: yes
#  postgresql_schema: name=test_scehma
#                     database=test_db
#                     state=present
 
- name: Ensure user has access to the database
  become_user: postgres
  become: yes
  postgresql_user: db={{ pg_db_name }}
                   name={{ pg_user }}
                   password={{ pg_user_pass }}
                   priv=ALL
                   state=present
                   encrypted=no

- name: Ensure user does not have unnecessary privileges
  become_user: postgres
  become: yes
  postgresql_user: name={{ pg_user }}
                   role_attr_flags=NOSUPERUSER,NOCREATEDB
                   state=present

- name: Clone git gaz repo
  git: repo={{ git_repo }}
       dest={{ git_dest }}

- name: python build gazetteer_export.sql 
  become: yes
  become_method: sudo
  command: python "{{ git_dest }}/src/sql/build_gazetteer_export.py" # need to make write out dynamic

# temp hack
- name: copy gazetteer_export.sql to sql dir 
  become: yes
  become_method: sudo
  command: cp gazetteer_export.sql "{{ git_dest }}/src/sql/"

- name: install database objects
  become_user: postgres
  become: yes
  become_method: sudo
  command: psql -d gazetteer -f {{ item }}

  with_items:
    - "{{ git_dest }}/src/sql/gazetteer_roles.sql"
    - "{{ git_dest }}/src/sql/gazetteer_schema.sql"
    - "{{ git_dest }}/src/sql/gazetteer_app_schema.sql"
    - "{{ git_dest }}/src/sql/gazetteer_sysdata_init.sql"
    - "{{ git_dest }}/src/sql/gazetteer_history.sql"
    - "{{ git_dest }}/src/sql/gazetteer_sysdata.sql"
    - "{{ git_dest }}/src/sql/gazetteer_export_schema.sql"
    - "{{ git_dest }}/src/sql/gazetteer_functions.sql"
    - "{{ git_dest }}/src/sql/gazetteer_geometry_views.sql"
    - "{{ git_dest }}/src/sql/gazetteer_text_search.sql"
    - "{{ git_dest }}/src/sql/gazetteer_search_function.sql"
    - "{{ git_dest }}/src/sql/gazetteer_add_user.sql"
    - "{{ git_dest }}/src/sql/gazetteer_app_funcs.sql"
    - "{{ git_dest }}/src/sql/gazetteer_app_sysdata.sql"
    - "{{ git_dest }}/src/sql/gazetteer_triggers.sql"
    - "{{ git_dest }}/src/sql/gazetteer_export.sql"
    - "{{ git_dest }}/src/sql/gazetteer_export_func.sql"
    # note in ssh : $psql -f gazetteer_reload_web.sql 
    - "{{ git_dest }}/src/sql/gazetteer_grant.sql"
    - "{{ git_dest }}/src/sql/gazetteer_web_functions.sql" 
    - "{{ git_dest }}/src/sql/gazetteer_reload_web.sql" 
    - "{{ git_dest }}/src/sql/gazetteer_grant.sql"
    # note in ssh : # $psql -c "select gazetteer.gweb_update_web_database()"

- name: run pgtap tests
  become_user: postgres
  become: yes
  become_method: sudo
  command: pg_prove -d {{ pg_db_name }} /vagrant/data/{{ pgtap_script }} 


